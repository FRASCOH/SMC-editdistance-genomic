import time
from numpy.create import zeros
from sequre import sequre, local
from sequre.types.sharetensor import Sharetensor as Stensor


@sequre
def minimum(mpc, x, y):
    mask = ((y - x) > 0).astype(int)
    return x * mask - y * (mask - 1)


#Levenshtein
@sequre
def levenshtein(mpc, s, t, buf):
    n = len(s)
    m = len(t)

    for i in range(1, m + 1):
        buf[i, 0] = buf[i, 0] * 0 + i
    
    for j in range(1, n + 1):
        buf[0, j] = buf[0, j] * 0 + j


    for j in range(1, n + 1):
        for i in range(1, m + 1):
            cost = int(s[i-1] != t[j-1])
            buf[i, j] = minimum(
                mpc, 
                minimum(mpc, buf[i-1, j] +1, buf[i, j-1] + 1),
                buf[i-1, j-1] + cost)

    return buf[m, n]


@local
def local_wrapper(mpc):
    # Tipi genetici nativi di Seq/Sequre
    seq_1 = s'gtcccacacggcaattgttaagctgcatatgcgaaggagaggacgtgcgc'
    seq_2 = s'aaatctcttccgtaagctgtcttgaggtacttggattggaagcagcccgg'

    d_public = zeros((len(seq_2) + 1, len(seq_1) + 1), dtype=int)
    d_stensor = Stensor.enc(mpc, d_public)

    #levenshtein
    s = time.time()
    lev_public = levenshtein(mpc, seq_1, seq_2, d_public)  # Esecuzione offline/stile Python del metodo levenshtein
    e = time.time()
    lev_public_time = e - s

    s = time.time()
    lev_stensor = levenshtein(mpc, seq_1, seq_2, d_stensor)  # Esecuzione sicura del metodo levenshtein
    e = time.time()
    lev_stensor_time = e - s

    if mpc.pid:  # I risultati in CP0 sono spesso zero, quindi non c'è bisogno di controllarli qui. Tuttavia, è necessario assicurarsi che CP0 sia incluso nei calcoli sopra (quindi se il ramo mpc.pid è impostato solo qui)
        print(f"Distanza di modifica (Levenshtein pubblica): {lev_public} done in {lev_public_time}s")
        print(f"Distanza di modifica (Levenshtein sicura): {lev_stensor.reveal(mpc)} done in {lev_stensor_time}s")


local_wrapper()
