import time
from numpy.create import zeros
from sequre import sequre, local
from sequre.types.sharetensor import Sharetensor as Stensor


@sequre
def minimum(mpc, x, y):
    mask = ((y - x) > 0).astype(int)
    return x * mask - y * (mask - 1)


#Levenshtein
@sequre
def gen_ukkonen(mpc, s1, s2, row):
    s1len = len(s1)
    s2len = len(s2)
    gmax = (s2len - 1) // 2
    gmin = 1 - gmax - (s1len - s2len)

    for j in range(gmax + 1):
        row[j] = row[j] + j  # Sequre public setter is not possible yet. This is a bypass.

    for i in range(1, s1len + 1):
        row[0] = row[0] * 0 + (i - 1)  # Sequre public setter is not possible yet. This is a bypass.

        # Regular python code below
        gmin += 1
        gmax += 1
        min_val = max(gmin, 1)
        max_val = min(gmax, s2len)
        
        # Sequre code for indexing below
        dia = row[min_val - 1]
        top = row[min_val]

        if s1[i - 1] != s2[min_val - 1]:
            dia = minimum(mpc, dia, top) + 1  # Sequre minimum computing and Sequre public addition

        row[min_val] = dia  # It is ok to use Sequre setter between two Stensors
        left = dia
        dia = top

        for j in range(min_val + 1, max_val + 1):
            top = row[j]

            if s1[i - 1] != s2[j - 1]:
                dia = minimum(mpc, dia, minimum(mpc, top, left)) + 1

            row[j] = dia
            left = dia
            dia = top

        if s2len == max_val:
            continue

        if s1[i - 1] != s2[max_val]:
            dia = minimum(mpc, dia, left) + 1

        row[max_val + 1] = dia

    dia = row[s2len]
    return dia


@local
def local_wrapper(mpc):
    # Tipi genetici nativi di Seq/Sequre
    seq_1 = s'gtcccacacggcaattgttaagctgcatatgcgaaggagaggacgtgcgc'
    seq_2 = s'aaatctcttccgtaagctgtcttgaggtacttggattggaagcagcccgg'

    row_public = zeros(len(seq_2) + 1, dtype=int)
    row_stenor = Stensor.enc(mpc, row_public, source_pid=0, modulus=a.modulus)

    #Generalized Ukkonen
    s = time.time()
    gu_public = gen_ukkonen(mpc, seq_1, seq_2, row_public)  # Esecuzione offline/stile Python del metodo levenshtein
    e = time.time()
    gu_public_time = e - s

    s = time.time()
    gu_stensor = gen_ukkonen(mpc, seq_1, seq_2, row_stenor)  # Esecuzione sicura del metodo levenshtein
    e = time.time()
    gu_stensor_time = e - s

    if mpc.pid:  # I risultati in CP0 sono spesso zero, quindi non c'è bisogno di controllarli qui. Tuttavia, è necessario assicurarsi che CP0 sia incluso nei calcoli sopra (quindi se il ramo mpc.pid è impostato solo qui)
        print(f"Distanza di modifica (Generalized Ukkonen pubblica): {gu_public} done in {gu_public_time}s")
        print(f"Distanza di modifica (Generalized Ukkonen sicura): {gu_stensor.reveal(mpc)} done in {gu_stensor_time}s")


local_wrapper()
