from numpy.create import arange, zeros

from sequre.attributes import sequre
from sequre.types.sharetensor import Sharetensor as Stensor
from sequre.types.multiparty_union import MPU

INF_VAL: int = 1 << 16

@sequre
def minimum(mpc, x, y):
    mask = ((y - x) > 0).astype(int)
    return x * mask - y * (mask - 1)

@sequre
def edit_distance_threshold(mpc, s1, s2, threshold, p, d):
    s1len = len(s1)
    s2len = len(s2)

    if threshold == -1:
        threshold = INF_VAL

    i, row, col = 0, 0, 0
    min_val, max_val = 0, 0
    boundary = min(s2len, threshold) + 1

    for i in range(boundary):
        p[i] = p[i] + i 

    for i in range(i, s2len + 1):
        p[i] = p[i] + INF_VAL  # Secure inf is not supported yet.

    for row in range(1, s1len + 1):
        d[0] = d[0] * 0 + row  # Hack

        min_val = min(1, row - threshold)
        max_val = min(s2len, row + threshold)

        if min_val > max_val:
            return -1

        if min_val > 1:
            d[min_val - 1] = d[min_val - 1] * 0 + INF_VAL

        for col in range(min_val, max_val + 1):
            if s1[row - 1] == s2[col - 1]:
                d[col] = p[col - 1]
            else:
                d[col] = minimum(mpc, p[col - 1], minimum(mpc, d[col - 1], p[col])) + 1

        p, d = d, p

    result = int(p[s2len].reveal(mpc))
    
    if result <= threshold:
        return result
    else:
        return -1


@sequre
def playground(mpc, a, b, c, d, e, f, g, h):
   
    # Seq/Sequre's native genomic types
    seq_1 = s'gtcccacacggcaattgttaagctgcatatgcgaaggagaggacgtgcgc'
    seq_2 = s'aaatctcttccgtaagctgtcttgaggtacttggattggaagcagcccgg'
    

    # Ukkonen
    p_public = zeros(len(seq_2) + 1, dtype=int)
    p_stenor = Stensor.enc(mpc, p_public, source_pid=0, modulus=a.modulus)
    d_public = zeros(len(seq_2) + 1, dtype=int) + INF_VAL
    d_stenor = Stensor.enc(mpc, d_public, source_pid=0, modulus=a.modulus)
    edt_public = edit_distance_threshold(mpc, seq_1, seq_2, 30, p_public, d_public)
    edt_stensor_revealed = edit_distance_threshold(mpc, seq_1, seq_2, 30, p_stenor, d_stenor)

    if mpc.pid: 
        print("Distanza di modifica (Distanza di modifica di Ukkonen pubblica): ", edt_public)
        print("Distanza di modifica (Distanza di modifica di Ukkonen sicura): ", edt_stensor_revealed)

    return a
