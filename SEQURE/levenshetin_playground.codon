from sequre.attributes import sequre_beaver as sequre
from sequre.stdlib.internal import Internal as sq, SharedTensor as Stensor
from sequre.stdlib.builtin import abs
from sequre.utils.param import u_int

@sequre
def min(mpc, x, y):
    mask = (y - x) > 0
    return x * mask - y * (mask - 1)

def map_nucleotide_to_integer(nucleotide):
    if nucleotide == 'A':
        return 0
    elif nucleotide == 'C':
        return 1
    elif nucleotide == 'T':
        return 2
    elif nucleotide == 'G':
        return 3
    else:
        raise ValueError("Invalid nucleotide: " + nucleotide)

def transform_to_int_vector(s):
    return [map_nucleotide_to_integer(nucleotide) for nucleotide in s]

def levenshtein_distance(mpc, s, t, modulus):
    m = len(s)
    n = len(t)
    d = SharedTensor.zeros(m + 1, n + 1, modulus)

    for i in range(1, m + 1):
        if mpc.pid == 1:
            d[i, 0] = int_t(i)

    for j in range(1, n + 1):
        if mpc.pid == 1:
            d[0, j] = int_t(j)

    for j in range(1, n + 1):
        for i in range(1, m + 1):
            if s[i - 1] == t[j - 1]:
                cost = int_t(0)
            else:
                cost = int_t(1)
            d[i, j] = min(
                mpc,
                min(mpc, d[i - 1, j] + 1, d[i, j - 1] + 1),
                d[i - 1, j - 1] + cost)

    return d[m, n]


@sequre
def playground(mpc, a, b, c, d, e, f, g, h):
    """
    Input params are hardcoded to:
        a = SharedTensor(mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
        b = SharedTensor(mpc.comms.share(
            [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
             int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
        c = SharedTensor(mpc.comms.share([int_t(i) for i in range(10)], modulus), modulus)
        d = SharedTensor(mpc.comms.share(
            [int_t(1), int_t(2), int_t(1), int_t(2), int_t(3),
             int_t(4), int_t(3), int_t(4), int_t(1), int_t(5)], modulus), modulus)
        e = SharedTensor(mpc.comms.share([int_t(i) for i in range(100000)], modulus), modulus)
        f = SharedTensor(mpc.comms.share(int_t(7), modulus), modulus)
        g = SharedTensor(mpc.comms.share(int_t(13), modulus), modulus)
        h = SharedTensor(mpc.comms.share(int_t(19), modulus), modulus)
    """
    
    levenshtein_distance(mpc, a, b)

    return a  # Playground is temporarily expected to return SharedTensor of list of int_t
