from sequre.attributes import sequre_beaver as sequre
from sequre.attributes import sequre
from sequre.types.shared_tensor import SharedTensor as Stensor


@sequre
def min(mpc, x, y):
    mask = (y - x) > 0
    return x * mask - y * (mask - 1)


@sequre
def levenshtein_optimized_distance(mpc, s, t, modulus):
    m = len(s)
    n = len(t)
    row1 = Stensor.zeros(m + 1, modulus)
    row2 = Stensor.zeros(n + 1, modulus)

    for j in range(1, n + 1):
        row1[j] = row1[j] + j

    for i in range(1, m + 1):
        row2[0] = row2[0] + j
        for j in range(1, n + 1):
            cost = int(s[i - 1] != t[j - 1])
            row2[j] = min(
                mpc,
                min(mpc, row1[j] + 1, row2[j - 1] + 1),
                row1[j - 1] + cost)
            row1, row2 = (row2, row1)
    return row1[n]


@sequre
def playground(mpc, a, b, c, d, e, f, g, h):
   
    # Seq/Sequre's native genomic types
    seq_1 = s'gtcccacacggcaattgttaagctgcatatgcgaaggagaggacgtgcgc'
    seq_2 = s'aaatctcttccgtaagctgtcttgaggtacttggattggaagcagcccgg'

    print("Distanza di modifica: ", levenshtein_optimized_distance(mpc, seq_1, seq_2, a.modulus).print(mpc))

    return a
